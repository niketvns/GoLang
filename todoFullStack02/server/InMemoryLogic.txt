package main

import (
	"fmt"
	"log"
	"os"

	"github.com/gofiber/fiber/v2"
	"github.com/joho/godotenv"
)

type Todo struct {
	Id          int    `json:"id"`
	Title       string `json:"title"`
	Description string `json:"description"`
	Completed   bool   `json:"isCompleted"`
}

func main() {
	fmt.Println("Hello World! ")
	app := fiber.New()

	err := godotenv.Load(".env")

	if err != nil {
		log.Fatal("Error loading .env file!")
	}

	PORT := os.Getenv("PORT")

	todos := []Todo{}

	app.Get("/", func(c *fiber.Ctx) error {
		return c.Status(200).JSON(fiber.Map{"msg": "Server is up!"})
	})

	// Get all todos
	app.Get("/api/todos", func(c *fiber.Ctx) error {
		return c.Status(200).JSON(fiber.Map{"msg": "Success!", "todos": todos})
	})

	// Create a todo
	app.Post("/api/todos", func(c *fiber.Ctx) error {
		todo := &Todo{}
		c.BodyParser(todo)
		if err := c.BodyParser(todo); err != nil {
			// write
			log.Println("Hello From log")
			return err
		}
		if todo.Title == "" {
			return c.Status(400).JSON(fiber.Map{"error": "Todo body is required!"})
		}
		todo.Id = len(todos) + 1
		todos = append(todos, *todo)

		return c.Status(201).JSON(todo)

	})

	// Update a todo
	app.Patch("/api/todos/:id", func(c *fiber.Ctx) error {
		id := c.Params("id")

		for i, todo := range todos {
			if fmt.Sprint(todo.Id) == id {
				todos[i].Completed = true
				return c.Status(200).JSON(fiber.Map{
					"todo": todos[i],
				})
			}
		}

		return c.Status(404).JSON(fiber.Map{
			"msg": "Todo not found!",
		})
	})

	// Delete a todo
	app.Delete("/api/todos/:id", func(c *fiber.Ctx) error {
		id := c.Params("id")

		for index, todo := range todos {
			if fmt.Sprint(todo.Id) == id {
				todos = append(todos[:index], todos[:index+1]...)
				return c.Status(200).JSON(fiber.Map{
					"msg": "Todo with ID: " + id + " deleted successfull",
				})
			}
		}

		return c.Status(404).JSON(fiber.Map{
			"msg": "Todo not exist!",
		})
	})

	log.Fatal(app.Listen(":" + PORT))
}
